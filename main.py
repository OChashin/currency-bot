import logging
import os
import aiohttp
import asyncio
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# üîπ –¢–≤–æ–π API-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "Your_Token"
CURRENCY_API_KEY = "Your API KEY"  # üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–π API-–∫–ª—é—á –æ—Ç FreeCurrencyAPI
CURRENCY_API_URL = f"https://api.freecurrencyapi.com/v1/latest?apikey={CURRENCY_API_KEY}"

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç
currency_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="USD"), KeyboardButton(text="EUR"), KeyboardButton(text="GBP")],
        [KeyboardButton(text="JPY"), KeyboardButton(text="UAH"), KeyboardButton(text="CNY")]
    ],
    resize_keyboard=True
)

# üîπ –•—Ä–∞–Ω–∏–º –ª—é–±–∏–º—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_favorites = {}


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç. –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard)


# üîπ –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    text = """
üìå <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>
/convert 100 USD to EUR ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É  
/graph USD EUR ‚Äî –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –∑–∞ 10 –¥–Ω–µ–π  
/rates USD ‚Äî —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –¥–ª—è –≤–∞–ª—é—Ç—ã  
/favorite USD EUR ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–∏–º—É—é –ø–∞—Ä—É  
/myfavorite ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–∏–º—É—é –ø–∞—Ä—É  
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º  
"""
    await message.answer(text)


# üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
@dp.message(Command("convert"))
async def convert_currency(message: types.Message):
    try:
        _, amount, from_currency, _, to_currency = message.text.split()
        amount = float(amount)

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{CURRENCY_API_URL}&base_currency={from_currency}") as response:
                data = await response.json()

        rates = data.get("data", {})
        if to_currency in rates:
            result = amount * rates[to_currency]
            await message.answer(f"üí± {amount} {from_currency} = {result:.2f} {to_currency}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª—é—Ç—ã.")
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: /convert 100 USD to EUR")


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫—É—Ä—Å–∞
@dp.message(Command("graph"))
async def graph_currency(message: types.Message):
    try:
        _, from_currency, to_currency = message.text.split()

        end_date = datetime.today().strftime('%Y-%m-%d')
        start_date = (datetime.today() - timedelta(days=10)).strftime('%Y-%m-%d')

        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.freecurrencyapi.com/v1/historical?apikey={CURRENCY_API_KEY}&base_currency={from_currency}&date_from={start_date}&date_to={end_date}") as response:
                data = await response.json()

        if "data" not in data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        rates = data["data"]
        dates, values = zip(*sorted((date, rates[date].get(to_currency, 0)) for date in rates))

        plt.figure(figsize=(8, 4))
        plt.plot(dates, values, marker='o', linestyle='-', color='b', label=f"{from_currency} ‚Üí {to_currency}")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ö—É—Ä—Å")
        plt.title(f"üìä –ö—É—Ä—Å {from_currency} –∫ {to_currency} –∑–∞ 10 –¥–Ω–µ–π")
        plt.xticks(rotation=45)
        plt.legend()
        plt.grid()

        graph_path = f"graph_{from_currency}_{to_currency}.png"
        plt.savefig(graph_path)
        plt.close()

        await message.answer_photo(open(graph_path, "rb"))
        os.remove(graph_path)
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /graph USD EUR")


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤–∞–ª—é—Ç—ã
@dp.message(Command("rates"))
async def get_rates(message: types.Message):
    try:
        _, base_currency = message.text.split()

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{CURRENCY_API_URL}&base_currency={base_currency}") as response:
                data = await response.json()

        rates = data.get("data", {})
        if not rates:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.")
            return

        text = f"üíπ <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¥–ª—è {base_currency}:</b>\n"
        for currency, rate in sorted(rates.items()):
            text += f"üî∏ {currency}: {rate:.2f}\n"

        await message.answer(text)
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /rates USD")


# üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–∏–º–æ–π –≤–∞–ª—é—Ç—ã
@dp.message(Command("favorite"))
async def favorite_currency(message: types.Message):
    user_id = message.from_user.id
    try:
        _, from_currency, to_currency = message.text.split()
        user_favorites[user_id] = (from_currency, to_currency)
        await message.answer(f"‚≠ê –¢–≤–æ—è –ª—é–±–∏–º–∞—è –≤–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {from_currency} ‚Üí {to_currency}")
    except Exception:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /favorite USD EUR")


# üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª—é–±–∏–º–æ–π –≤–∞–ª—é—Ç—ã
@dp.message(Command("myfavorite"))
async def my_favorite_currency(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_favorites:
        from_currency, to_currency = user_favorites[user_id]
        await convert_currency(types.Message(text=f"/convert 1 {from_currency} to {to_currency}"))
    else:
        await message.answer("‚ö†Ô∏è –¢—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –ª—é–±–∏–º—É—é –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π /favorite")


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(lambda message: message.text in ["USD", "EUR", "GBP", "JPY", "UAH", "CNY"])
async def handle_currency_choice(message: types.Message):
    await message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {message.text}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –∏ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É.\n–ü—Ä–∏–º–µ—Ä: /convert 100 {message.text} to EUR")


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–ª—è aiogram 3.7.0)
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
